[["index.html", "GitHub: A Beginners Guide ", " GitHub: A Beginners Guide Danielle Ethier and Josh Sayers, Birds Canada Version 2: June 2022 "],["Intro1.html", "Chapter 1 Introduction 1.1 Why is this Important? 1.2 Prerequisites 1.3 Acknowledgements", " Chapter 1 Introduction You are here because creating reproducible and accessible R code is important to your job with Birds Canada and ultimately to bird conservation. The goal of this guidebook is to give you (analytically savvy staff/ contractors/ partners) the tools needed to develop reproducible R code and step-by-step instructions on how to archive your old code or share your existing code and relevant documents in GitHub. Later chapters of this book will discuss working collaboratively using Git version control and GitHub. But do not fret, we will start with the basics first. While some of the instructions in this book are general guidelines/ best practices, others are mandatory for staff and contractors to ensure analytical scripts are properly stored and accessible for future use. 1.1 Why is this Important? Someone unfamiliar with your project should be able to look at your R code, data files, and outputs and understand in detail what you did and why. This someone will very likely be your future self! We very often discover flaws in our initial preparation of the data, get access to new data, or decide that the parameterization of a particular model was not correct. This means that the analysis you did last week/ month/ year will probably need to be redone. If you have organized and documented your work clearly, then repeating the analysis will be much, much easier. Staff turnover is also a reality in all organizations. If you leave Birds Canada for greener pastures, your colleagues/ replacements will also need to know where to find your scripts, files, and outputs. This will better ensure knowledge is not lost and time is not wasted recreating your workflows. Last, it is increasingly required by funders, partners, and publishers that data and analytical script be made available, such that the FAIR principal of data management and stewardship are followed: Findability, Accessibility, Interoperability, and Reusability. This is also a priority for Birds Canada as we strive to make our work more open and transparent. 1.2 Prerequisites This book assumes that you have a basic understanding of R and RStudio. Regardless of whether you are new to R or not, we highly recommend that you become familiar with R for Data Science by Garrett Grolemund and Hadley Wickham. Their book covers how to import, visualize, and summarize data in R using the tidyverse collection of R packages. It also provides an invaluable framework for organizing your workflow to create clean, reproducible code. 1.3 Acknowledgements Dr. Steffi LaZerte provided valuable comments and edits to improve the clarity and usability of this book. This R book will be updated as needed. If you have any comments or feedback, please submit them to dethier@birdscanada.org. "],["Git2.html", "Chapter 2 What are Git and GitHub? 2.1 Git 2.2 GitHub 2.3 Git the language? 2.4 Git to GitHub GUIs 2.5 Getting Started", " Chapter 2 What are Git and GitHub? Trying to find instructions on how to use git and GitHub online is notoriously difficult for beginners. You’ll often come across instructions like this: Doing X is easy. All you have to do is open up a terminal and type git -s -x -what -thehell -doesthisallevenmean Thankfully, using Git and GitHub doesn’t have to be this hard! You don’t even have to use the command line at all to benefit from these tools. To get started, it is important to know what Git and GitHub are and how they differ. 2.1 Git Git is software that (usually) runs on your computer. It is used to track all changes within a particular folder. Any change within that folder — a deleted file, a new line in a file, or a single changed letter in a single file — is tracked. It’s as if Microsoft word’s “Track Changes” function donned a cape, started solving crime, and kept meticulous notes all the while. A folder on your computer that is tracked by Git is called a repository or repo for short. The main difference between a Git repo and a regular folder on your computer is that a Git repo has a folder within it named .git. It’s within this .git folder that all the changes in the main folder are tracked. Other than that, a Git repo is just a folder on your computer like any other, but with new and wonderful powers. 2.2 GitHub GitHub is an internet service that provides online cloud hosting for Git repos, as well as useful tools for sharing and collaboration. You don’t have to have a GitHub account to use Git, and you don’t have to have Git installed on your computer to use GitHub. But if you want a cloud backup, want to sync your work to multiple computers, or especially if you want to collaborate or share your work with others (or use/contribute to their work!), you’ll want to use both Git and GitHub. Git tracks all changes within a particular folder (aka git repo) on your computer GitHub offers a way to backup or sync your Git repos, or to collaborate with others Image credit: devmountain.com If you’re a fancy pants programmer you may want to use Git from the command line (e.g., terminal or bash depending on your situation) so you can look cool, and admittedly have more fine-grained control over the process. But if you’re like the rest of us, and if you’re reading this document right now, you may want a more user- and beginner-friendly option. 2.3 Git the language? Were you the kid that was tormented by your siblings speaking Pig Latin (also known as “Igpay Atinlay”) and no matter how hard you tried, you couldn’t figure it out? Learning to use Git and GitHub can feel like learning a new language. But we promise it is easier than Pig Latin. When working with Git and GitHub, you are going to see the words repo, origin, commit, push, pull, clone, fork, and branch, among others. We will start with some basic definitions here, and in later chapters will elaborate on terms as necessary. repo(sitory) - a folder whose contents are is tracked by Git. A repo can exist locally (on your computer) as a remote repository (on GitHub), or both. origin - the primary Git repo, against which other copies are compared. In our examples, we will create the origin repo in GitHub push - send changes from your local Git repo to the remote repository (e.g. GitHub) pull - get changes from the cloud and updates your local Git repo Note: this is different from a pull request which is when you want someone else to incorporate your changes into their GitHub repo. More on this later. commit - create a named version of a set of one or more changes to a local Git repo. Like a bookmark of the current changes made. Often will be pushed to GitHub, but can be local only. To add to the confusion, commit in Git language can be a verb and a noun! In other words, when you commit your changes, you create a commit. clone - create a copy of a Git repo maintaining a direct link to the original repository. In our examples, the repos will first be created on GitHub (i.e., origin) and then cloned to your local Git repo on your computer. Note: if you clone a repo from someone else GitHub account, you cannot contribute to their repo unless they have given you access, but if you do you are contributing directly to the repository. fork - create a copy of a repo which maintains a loose connection between your local repo and the origin repo. Think of a fork as a bridge between the original repo and the local copy where changes can be made. After making and testing changes, you can contribute back to the original repo using a pull request which must be approved by the repository owner. branch - new/separate versions of the repo. It is a way to modify your scripts, while not changing your original code. If you’re happy with your changes you can eventually merge them into your original code. It is a feature in most version control systems. Note: the primary or default branch in Git is the master branch (sometimes referred to as main branch). Think of the master branch as the trunk of the tree. Every repo contains at minimum this one branch, which is created when the repo is initialized. If you want to test new changes, you would create another branch which could then be merged later. More on this later! 2.4 Git to GitHub GUIs There are multiple graphical interfaces for using Git and GitHub. This document will provide instructions for two methods: GitHub Desktop and RStudio. Q: Which option is for you?? A: It depends. GitHub Desktop and RStudio offer different advantages. Which is best for you will largely depend on how you plan to use and interact with GitHub. If you are not actively developing R code, and/or just need to get existing files into GitHub, GitHub Desktop is the easiest method, with the least amount of configuration. If you are actively writing analytical scripts in R, then using RStudio is recommend because there will be some additional instructions for using R Projects to organize your workflow and annotate your code. You can use multiple Git GUIs at the same time without any issues so feel free to set up and get familiar with both. 2.5 Getting Started Regardless of the GUI you choose to use, there are a few steps you need to take to get started. First, get the software and account that you need: Download and install git on your computer from here: https://git-scm.com/downloads Note: Most linux users will already have git installed, or should use their system’s repositories to install git Sign up for a GitHub account here: https://github.com/join Now you are ready to become a Git master! Chapter 3 will get you started with GitHub Desktop and Chapter 4 will get you started with RStudio. Some elements of these Chapter are repetitive so that users can choose one or the other. If you choose to go with both, then skim over the repetitive parts. Choose your own adventure! "],["Desk3.html", "Chapter 3 Setup GitHub Desktop 3.1 Step 1: Download 3.2 Step 2: Create New Repo 3.3 Step 3: Set up Desktop 3.4 Step 4: Copy files into your local Git repo 3.5 Step 5: Upload to GitHub", " Chapter 3 Setup GitHub Desktop You have chosen to download and setup Github Desktop. This is a great option if you are not actively coding, but have existing R script you want to move in bulk to GitHub. 3.1 Step 1: Download Download GitHub desktop from here: https://desktop.github.com/ 3.2 Step 2: Create New Repo Once everything is set up, log in to GitHub and create a new repository. You could in theory create just one repo and dump all your code in it, but you probably don’t have your code organized like that on your computer. Chances are you have your work organized (to some degree) in discreet folders that contain all the data and code relevant to a particular project. If so, that’s great; you’ll make a new .git repo for each project in your local folder. Recall: a Git repo is largely analogous to a folder on your computer. If you keep all code and data for a particular project in its own folder on your computer, give your new repo a name that reflects the project. You will notice a few option here when setting up your new repo. Repository name (required): Think short but concise. No spaces permitted. Also, each repo must have a unique name. This will also be the name of the R project folder on your computer. Public or Private repo: if you create a public repo, anyone on GitHub can see your work and seamlessly collaborate with you. A private repo can only be seen and accessed by you. You can add individual permissions to a Private repo to allow collaboration. And you can change the privacy setting at a later date. Initialize this repository with: README, .gitignore, license: it is good practice to include all three of these files in your repo. README file can be used to add a short description of your project. .gitignore will have a drop down menu of templates. Select the template specific to R. This files tell Git which files types to ignore in the repo (i.e. they won’t be tracked or synced by Git). For example, the session data files .RData and history files .Rhistory will not be backed up. You may also be working with very large raw data files that are too big for GitHub to handle. These can be added to the .gitignore file. Choose a license will also have a drop down menu. It is wise to protect your intellectual property by assigning a license to your scripts and associated documents. This is not mandatory, but recommend. For most of our work, the GNU General Public License v3.0 is a good choice. You can learn more about your options here. Note: By creating the repo first in GitHub, and then cloning the repo to your computer, the repo on GitHub is the primary copy, referred to as the origin. 3.3 Step 3: Set up Desktop Once you have selected Create Repository you’ll be brought to the next page with an option to Set up in Desktop. Click that and it will open up GitHub Desktop. You may need to log in to GitHub Desktop to authorize it. In GitHub Desktop you’ll be prompted for where on your local computer you want to create this repository. This will create the repo (aka a folder) in your chosen location. Note: don’t choose a folder inside another cloud storage folder (e.g. OneDrive, Dropbox, Google Drive) as this can cause issues. Also note: a GIT repo can only be created (aka initialized) in an empty folder. So if you are giving this repo the exact same name as the folder on your computer, and want to store it in the exact same place on your computer, you’ll need to rename your local folder first. Example: “My Project BACKUP”. Click clone and the repo you just created in GitHub will be copied (cloned) onto your local computer to be tracked by Git. 3.4 Step 4: Copy files into your local Git repo You now have a Git repo on your computer. Now you are going to copy over your .txt .R or .RMD files as well as folders that contain any other important “stuff” (e.g., inputs, outputs, documents, ect). This is just like any other folder on your computer, except that any changes that occur inside the folder are tracked by Git and can be backed up on GitHub. Here is an example using an “old code.txt” file and a folder named “stuff inside a folder in my repo”. Git keeps track of all changes inside a folder in near real-time, so almost as soon as you copy files into your new Git repo, you will see them reflected in GitHub Desktop. So far all you have done is observed changes inside the Git repo. But at this point Git isn’t remembering any of these changes. For that to happen, you need to commit changes. This is a very important concept when working with Git. When you commit changes, Git saves every detail about the current state of the folder at that moment. This is one of the most confusing things about Git when you are just beginning because the word commit is both a verb and a noun. Once you commit (verb) the current state of your Git repo/folder it’s referred to as a commit (noun). Really if we were being grammatically correct, we would probably refer to it as a commitment, or something like that. But as it stands, the word commit is used for both the process and the state. Every commit must be accompanied by a summary. It can be anything, but it’s helpful to make it short, clear, and descriptive so you know what changes are represented in that commit. Regardless of method used to interact with git — GitHub Desktop, RStudio, command line — you must always provide a summary when committing. Here are a few examples to help you get started: “first commit of data analysis code” “major updates to analysis. GLM to GAM” “changes to trends plots” “fix broken web links” Now, click the blue button Commit to main to commit to your main, or primary, branch. Recall: Git will not remember any changes unless you create a commit 3.5 Step 5: Upload to GitHub Once you’ve committed to your local repo you can push these changes to GitHub. You should see another conveniently placed blue button labeled push origin. Once again, Git’s grammatical shortcuts can create confusion; think of this as “push to origin”, origin being the primary copy of this repo (aka the one on GitHub). Note: Normally you would ensure that you always pull before pushing so that any newer changes on the GitHub copy of the repo are compared and incorporated. GitHub has a handy feature where it regularly checks for updates on the GitHub repo and will prompt you to pull when needed. Now your files are tracked by Git and the copies of this repo on your computer and GitHub are in sync. "],["RStud4.html", "Chapter 4 Setup Git in RStudio 4.1 Step 1: Download 4.2 Step 2: Create New Repo 4.3 Step 3: Configure RStudio 4.4 Step 4: Clone the Repository from RStudio 4.5 Step 5: Stage, commit and push 4.6 Extra: Link RStudio to existing local Git repo", " Chapter 4 Setup Git in RStudio You have chosen to download and setup Git in RStudio. This is a great option if you are actively coding in R. Note: The following steps will setup new and empty repositories on GitHub and locally for your R projects. If you already have an R project on the go, you will copy your scripts over to the new folder once you’ve finished setting things up. 4.1 Step 1: Download The assumption is that you have downloaded and are familiar with R and RStudio, and that you are organizing your R work in RStudio Projects. (But if you secretly need to download and get yourself familiar with these programs, you can do that now!) 4.2 Step 2: Create New Repo Once everything is set up, log in to GitHub and create a new repository. You’ll make a new Git repo for each RStudio Project folder. You will notice a few option here when setting up your new repo. Repository name (required): Think short but concise. No spaces permitted. Also, each repo must have a unique name. This will also be the name of the R project folder on your computer. Public or Private repo: if you create a public repo, anyone on GitHub can see your work and seamlessly collaborate with you. A private repo can only be seen and accessed by you. You can add individual permissions to a Private repo to allow collaboration. And you can change the privacy setting at a later date. Initialize this repository with: README, .gitignore, license: it is good practice to include all three of these files in your repo. README file can be used to add a short description of your project. .gitignore will have a drop down menu of templates. Select the template specific to R. This files tell Git which files types to ignore in the repo (i.e. they won’t be tracked or synced by Git). For example, the session data files .RData and history files .Rhistory will not be backed up. You may also be working with very large raw data files that are too big for GitHub to handle. These can be added to the .gitignore file. Choose a license will also have a drop down menu. It is wise to protect your intellectual property by assigning a license to your scripts and associated documents. This is not mandatory, but recommend. For most of our work, the GNU General Public License v3.0 is a good choice. You can learn more about your options here. 4.3 Step 3: Configure RStudio Since you already have Git installed on your computer, simply open RStudio and go to Tools &gt; Global Options. Ensure that Enable version control is checked and that the Git executable is the proper path on your computer. There’s a good chance this will already be populated. If not, it’s probably in a very similar location on your computer as shown below. It is also best to change a few other settings in RStudio if you’re working with Git, namely so that RStudio never saves the workspace. This keeps locally specific files that could give problems on other computers for other people. It is also good practice for your own work as it ensures that you never accidentally carry over errors between work sessions. When working with Git in RStudio you must use R Projects. Each repo will be associated with a single R Project. Q: What is an R Project? A: An RStudio project file is a file that sits in the root directory, with the extension .Rproj. This file tells RStudio that the folder is an R project folder and keeps track of any project-specific settings you use. When you work with a project in RStudio, the working directory in R points to that project folder. Using absolute file paths and setwd() is no longer recommended as it makes it hard to create truly shareable and reproducible scripts. It may seem like a radical move to abandon the setwd() orthodox entirely, but once you have figured out the R Project Workflow you’ll never consider using absolute file paths again! 4.4 Step 4: Clone the Repository from RStudio Now you will create a local clone of your Git repository from GitHub directly from RStudio. To achieve this, you’ll need to copy the repo URL in GitHub Then open RStudio and select New Project from the File menu, and then select Version Control -&gt; Git. Now paste the URL you just copied from GitHub, and provide a local folder to store the repo. Note: don’t choose a folder inside another cloud storage folder (e.g. OneDrive, Dropbox, Google Drive) for your local Git folders, as this can cause issues. Also note: a Git repo can only be created (aka initialized) in an empty folder. So if you are giving this repo the exact same name and location as an existing folder on your computer, you’ll need to rename your original folder first. Example: “My Project” –&gt; “My Project BACKUP”. Awesome! You have just created a clone of the origin repo onto your local computer to be tracked by Git! Now all of your interactions between Git and GitHub can happen through RStudio using the new Git tab, that will likely live alongside your Environment/History/etc tabs. The exact location will depend on how you have your RStudio configured. 4.5 Step 5: Stage, commit and push Now you are ready to start interacting with GitHub from RStudio. Here are some very basic instructions to get you started. As you are going about your regular coding business working in an R Project, Git will be keeping track of the changes you make to the files in this repo. To move these changes from your local repo back to the origin on the cloud, there are four simple steps to follow: stage, commit, pull, and push. Changes you make are not included in commits by default. To identify the changes you wish you commit, you stage them (think “add them to a staging area”). In the Git tab in RStudio, you will see check boxes under the word staged. Checking these boxes allows you to stage all changes in a file that you would like to commit to your local repo. You can also click on the “Commit” button to choose specific changes within a file to stage, resulting in staging only parts of a file. Having such fine grained control over which changes to commit is certainly handy, but it’s perfectly acceptable to just stage all changes on each commit. If you have many modified files you can easily stage them all by selecting them all using CTRL A then clicking any of the check boxes. Now that you have staged your changes, we are going to commit to the local repo. Every commit must be accompanied by a summary. It can be anything, but it’s helpful to make it short, clear, and descriptive so you know what changes are represented in that commit. Regardless of the method used to interact with Git — GitHub Desktop, RStudio, command line — you must always provide a summary when committing. Here are a few examples to help you get started: “first commit of data analysis code” “major updates to analysis. GLM to GAM” “changes to trends plots” “fix broken web links” When you commit changes, Git saves every detail about the current state of the folder at that moment. This is one of the most confusing things about Git when you are just beginning because the word commit is both a verb and a noun. Once you commit (verb) the current state of your Git repo/folder it’s referred to as a commit (noun). Really if we were being grammatically correct, we would probably refer to it as a commitment, or something like that. But as it stands, the word commit is used for both the process and the state. The cloud/GitHub version of your repo is considered the primary copy, referred to as the origin. If you only ever work from one computer, it’s unlikely that the origin repo on GitHub will ever be ahead of your local repo. But if you are collaborating or if you work from multiple computers, your local repo may be out of date. In these cases, making sure you regularly pull before push will help avoid conflicts in the code, so it’s good practice to get into. Luckily, if you forget to pull Git will warn you if you’re about to push changes that conflict with changes previously made to the origin. Once you’ve committed to your local repo, and pulled the latest updates from the origin repo (on GitHub), you can push these changes to GitHub. Now the local and GitHub clones of this repo are in sync. 4.6 Extra: Link RStudio to existing local Git repo If you have a Git repo on your computer that you created with GitHub Desktop, for example, you can link this to RStudio. First, create a New Project from the File menu in RStudio and select Existing Directory. Then navigate to your Git repo (aka folder). Select it and RStudio will base the new project out of this folder. RStudio will recognize that this folder is a Git repo and it will set it up the project appropriately. "],["Branch5.html", "Chapter 5 GitHub Branch 5.1 Step 1: Create a branch 5.2 Step 2: Name your branch 5.3 Step 3: Make changes 5.4 Step 4: Push changes 5.5 Step 5: Compare &amp; pull request 5.6 Step 6: Delete branch 5.7 Tips to keep you popular", " Chapter 5 GitHub Branch A branch is a way work on alternative versions of your scripts (e.g., a new feature or modification), while not affecting the original (i.e., the main or default branch). It is good practice to work on short-lived branches, so that merging is easier. If you are working on developing new code, you will probably work from a single branch, called the main or default branch, and commit changes as you go to the origin on GitHub. But once you are making changes to established code, or are collaborating on code development, you will want to create a separate branch to work on so that you are not risking breaking what is already working! Here are some steps to get you started. We only provide instructions for RStudio because we assume if you are actively coding you are using RStudio. 5.1 Step 1: Create a branch Create a new branch using the symbol next to the current branch name. 5.2 Step 2: Name your branch Give your branch a meaningful name that is all lower case with no spaces. Then check the box Sync branch with remote and then Create. This is now called the feature or topic branch. 5.3 Step 3: Make changes Edit the script as you want within the branch using RStudio. This is when you can break what is working and test new ideas. 5.4 Step 4: Push changes Once you have tested your new scripts and are positive they are working, you can stage, commit and push your changes to GitHub, using the same instructions previously provided in Chapter 4. 5.5 Step 5: Compare &amp; pull request Once you are satisfied with your work, you can open a pull request to merge the changes with the main branch. Navigate to your Github repository (online) and click on Compare &amp; Pull requests then select Create pull request. Now you should be given the option to `Merge pull request’ if there are not conflicts with the base branch, then select “Confirm merge”. As you have noticed, GitHub has a series of safety checks to ensure you don’t accidentally merge changes you don’t intend to merge. 5.6 Step 6: Delete branch Once complete, you can delete the old branch. Github will prompt you to do this. All you need to do is select ‘Delete branch’. 5.7 Tips to keep you popular In order to remain popular with your peers when working on collaborative projects, keep these consideration in mind when working with branches: Never merge locally on your machine. Always merge branches online. Always commit into a feature/topic branch, never to the master branch. Always start a new branch from the main branch. Only work on your own branches. Never merge a collaborators pull request without their consent. Branches should be short-lived. Now you are ready to branch. We suggest you do a test to see how it works and get comfortable with the process before working with collaborators. "],["Share6.html", "Chapter 6 Sharing GitHub Scripts 6.1 Contributing code with RStudio 6.2 Transferring ownership", " Chapter 6 Sharing GitHub Scripts Now that you have mastered the basics of working with Git and GitHub using your preferred GUI you are ready to start collaborating (i.e., contribute to someones else’s scripts). We will also walk you though how to transfer your repo to a new organization (e.g., Birds Canada) for long-term storage and management. 6.1 Contributing code with RStudio The idea of contributing code to someones repo can seem daunting at first. Let’s keep it simple to start. First, you will want to Fork the target repo to your own account. Navigate to your collaborator’s GitHub page (e.g., Birds Canada), select the repo you want to work on, and use the Fork icon in the top right corner. Then select ‘Create Fork’. Now the repo will appear in your list of Repositories on your personal Github page. You can clone the repo to your local machine using the instructions previously provided for RStudio. Check out a new branch using the instructions previously provided in Use branches to avoid heartache. This will make a branch of your forked repo. Once you’re finished your edits, you will create a pull request. The difference now is that the repo owner will need to merge the pull request on their Github account. This gives them a chance to review your changes before merging them with the main branch. Those are the basics to get you started. 6.2 Transferring ownership Once your code is fully developed and tested, it can be transferred to Birds Canada’s Github account for future management. Why would you want to transfer ownership? By transferring the repository to Birds Canada, its content, issues, pull request, etc., can be administered without the need for your input moving forward. If you are a contractor, this makes sense since you may or many not be involved with future script development. If you are a regular employee, your scripts will be more accessible to other staff for collaborative development, and this ensures they are not lost if you move on to other projects or organizations. Note: You can still contribute to the scripts once transferred, and you will still be given credit for authorship (or co-authorship). 6.2.1 Prerequisites for repository transfers When you transfer a repository that you own to another user account, the new owner will receive a confirmation email. The confirmation email includes instructions for accepting the transfer. If the new owner doesn’t accept the transfer within one day, the invitation will expire. To transfer a repository that you own to an organization, you must have permission to create a repository in the target organization. If you are not yet a member of the Birds Canada organization on GitHub and need to transfer ownership of your code, please let me know and I will add you: dethier@birdscanada.org The target account/organization must not have a repository with the same name, or a fork in the same network. The original owner of the repository is added as a collaborator on the transferred repository. Other collaborators to the transferred repository remain intact. Private forks can’t be transferred (you must first make them public). 6.2.2 Step-by-Step In your online GitHub account, navigate to the main page of the repository you wish to transfer. Once you have navigate to your repository, click Settings. Under the General tab, scroll to the very bottom labelled “Danger Zone”. Click on Transfer Ownership. Read the information about transferring a repository, then type the name of the organization you’d like to transfer ownership to. In this instance you will type BirdsCanada (all one word), along with the name of the repository. You will be promoted to enter your Github password to complete the transfer. If you are part of the Birds Canada staff ‘Team’ on GitHub, you can click this box to allow other staff to access your scripts. You have now transferred ownership, but you also broken the connection between the GitHub repo and RStudio. Don’t panic! We can fix this without needing to use the command line interface. Here is some sample R code for changing the origin of the repo from your personal GitHub account to Birds Canada. #load the library library (usethis) #look to see where RStudio is currently looking for the GitHub origin. usethis::git_remotes() #output example #&quot;https://github.com/DMEthier/BirdsCanada_GitHubGuide.git&quot; #Now redirect RStudio the new origin on the Birds Canada GitHub account usethis::use_git_remote( &quot;origin&quot;, &quot;https://github.com/BirdsCanada/BirdsCanada_GitHubGuide.git&quot;, overwrite = TRUE ) Whew! You have now fixed the broken link and can contribute your changes to the new origin. "],["Best7.html", "Chapter 7 GitHub Best Practices 7.1 Use a unique repository for each project 7.2 Use branches to avoid heartache 7.3 Create a meaningful .gitignore file 7.4 Define the code owner 7.5 Don’t let your password leak into your code 7.6 Don’t commit a crime", " Chapter 7 GitHub Best Practices Now that you have a GitHub account and are set up on GitHub Desktop or RStudio, we will bestow upon you some additional best practices. 7.1 Use a unique repository for each project You can host multiple projects on GitHub at the same time but it would be a mistake to use one repository to store information about multiple projects. Make sure you maintain a unique repository for each project. Like folders on your computer, this will keep your code organized and your brain happy. 7.2 Use branches to avoid heartache As you learned in Chapter 5 a branch is a way work on alternative versions of your scripts (e.g., a new feature or modification), while not affecting the original (i.e., the main or default branch). It is good practice to work on short-lived branches, so that merging is easier and so that you are not risking breaking what is already working! 7.3 Create a meaningful .gitignore file .gitignore files are plain text files that instruct the program on predefined files that should be ignored. Specifically, GitHub has a file size limit. It is therefore best suited to storing your R scripts and other related files (e.g., README), but not raw data and large output files. These files should be save elsewhere on your computer and backed up on your cloud storage. This also allows you to share scripts publically, but to keep potentially sensitive data separate. Recall that during the creation of your first repo we selected the R .gitignore file template, which will be saved in your root folder. You can open this file in RStudio and add or remove any file types. For example: .pdf .csv .xlsx 7.4 Define the code owner It is important that you give yourself credit for the code you create, and likewise give others credit for the code they created. If you borrow or modify code from another source, this is OK! Just make sure you give credit where credit is due. Similarly, if you are collaborating on code development, define the roles of each author. This can be done at the front end of your scripts and interspersed within the script. GitHub has a built-in code owners feature that allows you to grant access to a particular group of staff or partners. Only verified code owners will be able to edit or review the project. The code owner feature can be used for more than assigning individuals to work on the repository. It can automatically assign teams and grant them permission to work on the project and maintain the repository. Birds Canada will be using the team and code owner feature to manage scripts that are shared. 7.5 Don’t let your password leak into your code While it seems obvious that you should not share your password, you might accidentally save this in your source code and commit it to GitHub. For example, when downloading data from NatureCounts using the R package, you might be inclined to save your username and password in your source code. Ensure this isn’t the case before you commit! 7.6 Don’t commit a crime Make small commits and make them often. Each commit should reflect changes that are easily accompanied by a single and informative commit message. For example: “Change made to analysis model fit code” You should try to refrain from making a lot of changes to a lot of sections of your code making a mixed-commit. For example: “Major changes to analysis, data manip, and bookdown yml.” If you need to revert any files, or even just check your history of file changes, you will be happy you made consistent and well detailed commits. "],["Resource8.html", "Chapter 8 GitHub Resources 8.1 RStudio Resources 8.2 GitHub Desktop Resources", " Chapter 8 GitHub Resources There are oodles of GitHub resources available online. The trick is finding the ones that are not too advanced (i.e., command line). Here we list a handful or resources you may find useful. Please let us know if there are other we should add to the list! 8.1 RStudio Resources Git hands-on session within RStudio by Stijn Van Hoey, Peter Desmet, and Thierry Onkelinx Happy Git and GitHub for the useR - by Jennifer Bryan - Slightly more advanced, but good for those getting comfortable and wanting more 8.2 GitHub Desktop Resources "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
