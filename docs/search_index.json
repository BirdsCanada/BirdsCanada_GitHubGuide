[["index.html", "R Code Annotation and Achieving with GitHub: A Beginners Guide ", " R Code Annotation and Achieving with GitHub: A Beginners Guide Danielle Ethier and Josh Sayers Version 1: March 2022 "],["Intro1.html", "Chapter 1 Introduction 1.1 Why is R Code Annotation and Achieving Important? 1.2 Prerequisites 1.3 Acknowledgements", " Chapter 1 Introduction Welcome to Birds Canadas R Code Archiving network! You are here because creating reproducible and accessible R code is important to your job with Birds Canada and ultimately to bird conservation. The goal of this guidebook is to give you (analytically savvy staff/ contractors/ partners) the tools needed to develop reproducible R code and step-by-step instructions on how to archive your code and relevant documents in GitHub. Later chapters of this book will discuss R code sharing using version control with GitHub. But do not fret, we will start with the basics first. While some of the instructions in this book are general guidelines/ best practices, others are mandatory for staff and contractors to ensure analytical scripts are properly stored and accessible for future use. 1.1 Why is R Code Annotation and Achieving Important? Someone unfamiliar with your project should be able to look at your R code, data files, and outputs and understand in detail what you did and why. This someone will very likely be your future self! We very often discover flaws in our initial preparation of the data, get access to new data, or decide that the parameterization of a particular model was not correct. This means that the analysis you did last week/ month/ year will probably need to be redone. If you have organized and documented your work clearly, then repeating the analysis will be much, much easier. Staff turnover is also a reality in all organizations. When you leave Birds Canada for greener pastures, your colleague/ predecessors will also need to know where to find your scripts, files, and outputs. This will better ensure knowledge is not lost and time is not wasted recreating your workflows. Last, it is increasing required by funders and during th publication process that data and analytical script be made available, such that the FAIR principal of data management and stewardship are followed: Findability, Accessibility, Interoperability, and Reuse of digital assets. 1.2 Prerequisites This book assumes that you have a basic understanding of R and RStudio. Regardless of whether you are new to R or not, I highly recommend that you become familiar with R for Data Science by Garrett Grolemund and Hadley Wickham (http://r4ds.had.co.nz/). Their book covers how to import, visualize, and summarize data in R using the tidyverse collection of R packages (https://www.tidyverse.org/). It also provides an invaluable framework for organizing your workflow to create clean, reproducible code (http://r4ds.had.co.nz/workflow-projects.html). 1.3 Acknowledgements Funding for this initiative was provided by  This R book will be updated as needed. If you have any comments or feedback, please submit them to dethier@birdscanada.org "],["Git2.html", "Chapter 2 What are Git and GitHub? 2.1 Git 2.2 GitHub 2.3 Speaking .git language 2.4 .git to GitHub GUI 2.5 Getting Started", " Chapter 2 What are Git and GitHub? Trying to find instructions on how to use git and GitHub online is notoriously difficult for beginners. Youll often come across instructions like this: Doing X is easy. All you have to do is open up a terminal and type git -s -x -what -thehell -doesthisallevenmean Thankfully, using git and GitHub is super easy and you dont have to use the command line at all to benefit from these tools. To get started, it is important to know what git and GitHub are and how they differ. &gt; Image credit: devmountian.com 2.1 Git Git is software that (usually) runs on your computer. It is used to tracks all changes within a particular folder. Any change within that folder --- a deleted file, a new line in a file, or a single changed letter in a single file --- is tracked. Its as if Microsoft words Track Changes function donned a cape, started solving crime, and kept meticulous notes all the while. A folder on your computer that is tracked by git is called a repository or repo for short. The only difference between a git repo and a regular folder on your computer is that a git repo has a folder within it named .git. Its within this .git folder that all the changes in the main folder are tracked. Other than that, a git repo is just a folder on your computer like any other, but with new and wonderful powers. 2.2 GitHub GitHub is an internet service that provides online cloud hosting for .git repos, as well as useful tools for sharing and collaboration. You dont have to have a GitHub account to use git, and you dont even have to have git installed on your computer to use GitHub. But if you want a cloud backup, want to sync your work to another computer, or especially if you want to collaborate or share your work with others (or copy their work!), youll want to use both .git and GitHub. .git tracks all changes within a particular folder (aka git repo) on your computer GitHub offers a way to backup or sync your .git repos, or to collaborate with others If youre a fancy pants programmer you may want to use git from the command line (e.g., terminal or bash depending on your situation) so you can look cool, and admittedly have more fine-grained control over the process. But if youre like the rest of us, and if youre reading this document right now, you want a more user- and beginner-friendly option. 2.3 Speaking .git language Were you the kid that was tormented by your siblings speaking Pig Latin (also known as Igpay Atinlay) and no matter how hard you tried, you couldnt figure it out. Learning to use .git and Github can feel like learning a new language. But we promise it is easier than Pig Latin. When working with .git and GitHub, you are going to see the words repo, origin, commit, push, pull, clone, fork, and branch. We will start with some basic definitions here, and in later chapters will elaborate on terms as necessary. repo(sitory) - one or more folders that have .git functionality. GitHub repos are initiated and stored on the cloud origin - the original .git repo, which is initialized in GitHub Push - sends changes from your local .git repo to the cloud Pull - gets changes from the cloud and updates your local .git repo Note: this is different from a pull request which is when you want someone else to incorporate your changes into thier GitHub repo. More on this later. commit - create a named version of a set of one or more changes to a local .git repo, to be pushed to the cloud Now here are some terms that can cause confusion: clone - creates a copy of your GitHub repo on your local computer so that you can sync with the original repo. All .git repos are first created on the cloud (i.e., origin) and then cloned to your local .git repo on your computer. Note: if you clone a repo from someone else GitHub account, you cannot contribute to the repo unless you are a collaborator. Generally, you will make a folk if you are working collaboratively on a repo. fork - creates a copy of a repo which maintained a connection between your local repo and the origin repo. Think of a folk as a bridge between the original repo and the local copy where changes can be made. After making and testing changes, you can contribute back to the original repo using a pull request. {-} &gt; Image credit: geeksforgeeks.org 2.4 .git to GitHub GUI There are multiple graphical interfaces for using .git and GitHub. This document will provide instructions for two methods: GitHub Desktop and RStudio. Q: Which option is for you? A: It depends. GitHub Desktop and RStudio offer different advantages. So which is for you will largely depend on how you plan to use and interact with GitHub. If you are not actively developing R code, and/or just need to get existing files into GitHub, GitHub Desktop is the easiest method, with the least amount of configuration. If you are actively writing analytical scripts in R, then using RStudio is recommend because there will be some additional instructions for using R Projects to organize your workflow and annotate your code. You can use multiple .git GUI at the same time without any issues so feel free to set up and get familar with both. 2.5 Getting Started Regardless of the GUI you select to use, there are a few steps you need to take to get started. First, get the software and account that you need: Download and install git on your computer from here: https://git-scm.com/downloads {-} Sign up for a GitHub account here: https://github.com/join {-} Now you are ready to become a git master. Chapter 3 will get you started with GitHub Desktop and Chapter 4 will get you started with RStudio. Choose your own adventure! "],["Desk3.html", "Chapter 3 Setup GitHub Desktop 3.1 Step 1: Download 3.2 Step 3: Set up Desktop 3.3 Step 4: Copy files into your local .git repo 3.4 Step 5: Upload to GitHub", " Chapter 3 Setup GitHub Desktop You have chose to download and setup Github Desktop. This is a great option if you are not actively coding, but have existing R script you want to move in bulk to GitHub. 3.1 Step 1: Download Download GitHub desktop from here: https://desktop.github.com/ {-} ##Step 2: Create New Repo {#Desk3.2} Recall: all .git repos that are backup on the cloud are initilized from Github. This is refered to the origin repo. Once everything is set up, log in to GitHub and create a new repository. You could in theory create just one repo and dump all your code in it, but you probably dont have your code organized like that on your computer. Chances are you have your work organized (to some degree) in discreet folders that contain all the data and code relevant to a particular project. If so, thats great; youll make a new .git repo for each project in your local folder. {-} Recall: a .git repo is largely analogous to a folder on your computer. If you keep all code and data for a particular project in its own folder on your computer, give your new repo a name that reflects the project. {-} You will notice a few option here when setting up your new repo. Repository name (required): Think short but concise.No spaces permitted. Also, each repo must have a unique name. Public or Private repo: if you create a public repo, anyone on Github can see your work and seamless collaborate with you. A private repo can only be seen and accessed by you. You can add individual permissions to a Private repo to allow collaboration. And you can change the privacy setting at a later date. Initialize this repository with: README, .gitignore, license: it is good practice to include all three of these files in your repo. `README` file can be used to add a short description of your project. `.gitignore` will have a drop down menu of templates. Select the template specific to R. This files tell .git which files types to ignore in the repo (i.e. they won&#39;t be backed up on the GitHub cloud storage). For example, the session data files `.RData` and history files `.Rhistory` will not be backed up. You may also be working with very large raw data files that are too big for GitHub to handle. These can be added to the `.gitignore` file. Example: you may want to add `.csv` to exclude raw data files. `Choose a license` will also have a drop down menu. It is wise to protect your intellectual property by assigning a license to your scripts and associated documents. This is not mandatory, but recommend. For most of our work, the GNU General Public License v3.0 is a good choice. You can learn more about your options [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository). 3.2 Step 3: Set up Desktop Once you have selected Create Repositroy youll be brought to the next page with an option to Set up in Desktop. Click that and it will open up GitHub Desktop. You may need to log in to GitHub Desktop to authorize it. {-} In GitHub Desktop youll be prompted for where on your local computer you want to create this repository. This will create the repo (aka a folder) in your chosen location. Note: dont choose a folder inside another cloud storage folder (e.g. OneDrive, Dropbox, Google Drive) as this can cause issues. Also note: a git repo can only be created (aka initialized) in an empty folder. So if you are giving this repo the exact same name as the folder on your computer, and want to store it in the exact same place on your computer, youll need to rename your local folder first. Example: My Project BACKUP. Click clone and the repo you just created in GitHub will be copied (cloned) onto your local computer to be tracked by .git. {-} 3.3 Step 4: Copy files into your local .git repo You now have a .git repo on your computer. Now you are going to copy over your .txt .R or .RMD files as well as folders that contain any other important stuff (e.g., inputs, outputs, documents, ect). This is just like any other folder on my computer, except that any changes that occur inside the folder are tracked by .git and can be backup on GitHub. Here is an example using an old code.txt file and a folder named stuff inside a folder in my repo. {-} Git keeps track of all changes inside a folder in near real-time, so almost as soon as you copy files into your new .git repo, you will see them reflected in GitHub Desktop. {-} So far all you have done is observed changes inside the .git repo. But at this point git isnt remembering any of these changes. For that to happen, you need to commit changes. This is a very important concept when working with git. When you commit changes, .git saves every detail about the current state of the folder at that moment. This is one of the most confusing things about git when you are just beginning because the word `commit` is both a verb and a noun. Once you commit (verb) the current state of your .git repo/folder its referred to as a commit (noun). Really if we were being grammatically correct, we would probably refer to it as a commitment, or something like that. But as it stands, the word `commit` is used for both the process and the state. Every commit must be accompanied by a summary. It can be anything, but its helpful to make it short, clear, and descriptive so you know what changes are represented in that commit. Regardless of method used to interact with git  GitHub Desktop, RStudio, command line  you must always provide a summary when committing. Here are a few examples to help you get started: - first commit of data analysis code - major updates to analysis. GLM to GAM - changes to trends plots - fix broken web links {-} Now, click the blue button Commit to main to commit to your main, or primary, branch. Recall: .git will not remeber any changes unless you create a commit 3.4 Step 5: Upload to GitHub Once youve committed to your local repo you can push these changes to GitHub. You should see another conveniently placed blue button labeled push origin. Once again, gits grammatical shortcuts can create confusion; think of this as push to origin, origin being your primary repo (aka the one on GitHub). Now your files you tracked by .git and uploaded to GitHub. Recall: because you created the repo first in GitHub, the cloud version is the primary copy, referred to as the origin. "],["RStud4.html", "Chapter 4 Working with Git in RStudio 4.1 Step 1: Download 4.2 Step 3: Configure RStudio 4.3 Step 4: Initializing a .git repo from RStudio 4.4 Step 5: Link RStudio to exisiting local .git repo", " Chapter 4 Working with Git in RStudio You have chose to download and setup git in RStudio. This is a great option if you are actively coding. 4.1 Step 1: Download The assumption was made that you have downloaded and are familiar with R and RStudio. But if you secretly need to download and get yourself familiar with these program, you can do that now. ##Step 2: Create New Repo {#RStud4.2} Recall: all .git repos that are backup on the cloud are initilized from Github. This is refered to the origin repo. Once everything is set up, log in to GitHub and create a new repository. Youll make a new .git repo for each R Project. {-} {-} You will notice a few option here when setting up your new repo. Repository name (required): Think short but concise.No spaces permitted. Also, each repo must have a unique name. Public or Private repo: if you create a public repo, anyone on Github can see your work and seamless collaborate with you. A private repo can only be seen and accessed by you. You can add individual permissions to a Private repo to allow collaboration. And you can change the privacy setting at a later date. Initialize this repository with: README, .gitignore, license: it is good practice to include all three of these files in your repo. `README` file can be used to add a short description of your project. `.gitignore` will have a drop down menu of templates. Select the template specific to R. This files tell .git which files types to ignore in the repo (i.e. they won&#39;t be backed up on the GitHub cloud storage). For example, the session data files `.RData` and history files `.Rhistory` will not be backed up. You may also be working with very large raw data files that are too big for GitHub to handle. These can be added to the `.gitignore` file. Example: you may want to add `.csv` to exclude raw data files. `Choose a license` will also have a drop down menu. It is wise to protect your intellectual property by assigning a license to your scripts and associated documents. This is not mandatory, but recommend. For most of our work, the GNU General Public License v3.0 is a good choice. You can learn more about your options [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository). 4.2 Step 3: Configure RStudio Since you already have .git installed on your computer, simply open RStudio and go to Tools &gt; Global Options. Ensure that Enable version control is checked and that the Git executable is the proper path on your computer. Theres a good chance this will already be populated. If not, its probably in a very similar location on your computer as shown below. {-} It is also best to change a few other settings in RStudio if youre working with .git, namely so that RStudio never saves the workspace. This keeps locally specific files that could give problems on other computers for other people, out of your git repo. {-} Note: when working with .git in RStudio you must use R Projects. Each repo will be associated with a single R Project. Q: What is an R Project? A: An RStudio project file is a file that sits in the root directory, with the extension .Rproj. When your RStudio session is running through the project file (.Rproj), the current working directory points to the root folder where that .Rproj file is saved. It may seem like a radical move to abandon the setwd()orthodox entirely, but once you have figured out the R Project Workflow youll never consider using absolute file paths again! This is also fundamental aspect of creating shareable and reproducible scripts. 4.3 Step 4: Initializing a .git repo from RStudio Now you will initialize your local .git repo directly from RStudio. To achieve this, youll need to copy the repo URL in GitHub {-} Then open RStudio and select New Project from the File menu, and then select Version Control &gt; Git. Now paste the URL you just copied from GitHub, and provide a local folder to store the repo. Note: dont choose a folder inside another cloud storage folder (e.g. OneDrive, Dropbox, Google Drive) for your local .git folders, as this can cause issues. {-} You have just created a clone of the origin repo onto your local computer to be tracked by .git. Now all of your interactions between .git and GitHub can happen through RStudio using the new Git tab, that will likely live alongside you Environments/History/File/Plots, ect. The exact location will depend on how you have your RStudio configured. {-} 4.4 Step 5: Link RStudio to exisiting local .git repo If you have a .git repo on your computer that you created with GitHub Desktop, for example, you can link this to RStudio. First, create a New Project from the File menu in RStudio and select Existing Directory. Then navigate to your .git repo (aka folder). Select it and RStudio will base the new project out of this folder. RStudio will recognize that this folder is a .git repo and it will set it up the project appropriately. {-} "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
